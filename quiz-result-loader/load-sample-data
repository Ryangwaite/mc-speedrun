#!/usr/bin/env python3

import datetime
import json
import os
import random
import shutil
import string
import sys
from typing import List
import uuid
import redis                # pip install redis
import pika                 # pip install pika
from tqdm import tqdm       # pip install tqdm
from dataclasses import dataclass


@dataclass
class Item():
    key: str
    value: any
    rtype: str  # Redis type


def build_contents(quiz_id: str) -> List[Item]:

    user1_id = "".join(random.sample(string.ascii_letters, 8))
    user2_id = "".join(random.sample(string.ascii_letters, 8))

    return [
        Item(key=f"{quiz_id}:quizName", value="example", rtype="string"),
        Item(key=f"{quiz_id}:questionDuration", value="10", rtype="string"),
        Item(key=f"{quiz_id}:selectedQuestionIndexes", value=['3', '4', '5'], rtype="list"),
        Item(key=f"{quiz_id}:selectedCategories", value=['Food'], rtype="list"),
        Item(key=f"{quiz_id}:startTime", value="1643273678", rtype="string"),
        Item(key=f"{quiz_id}:stopTime", value="1643273701", rtype="string"),
        Item(key=f"{quiz_id}:leaderboard", value={user1_id: 35.0, user2_id: 80.0}, rtype="zset"),
        Item(key=f"{quiz_id}:userIds", value=['2c3ca3d2', 'ee14ccb2'], rtype="list"),

        Item(key=f"{quiz_id}:{user1_id}:username", value="user1", rtype="string"),
        Item(key=f"{quiz_id}:{user1_id}:stopTime", value="1643273706", rtype="string"),
        Item(key=f"{quiz_id}:{user1_id}:answer:3", value='{"selectedOptionIndexes":[1],"answeredInDuration":8}', rtype="string"),
        Item(key=f"{quiz_id}:{user1_id}:answer:4", value='{"selectedOptionIndexes":[],"answeredInDuration":11}', rtype="string"),
        Item(key=f"{quiz_id}:{user1_id}:answer:5", value='{"selectedOptionIndexes":[1],"answeredInDuration":2}', rtype="string"),

        Item(key=f"{quiz_id}:{user2_id}:username", value="user2", rtype="string"),
        Item(key=f"{quiz_id}:{user2_id}:stopTime", value="1643273701", rtype="string"),
        Item(key=f"{quiz_id}:{user2_id}:answer:3", value='{"selectedOptionIndexes":[0],"answeredInDuration":2}', rtype="string"),
        Item(key=f"{quiz_id}:{user2_id}:answer:4", value='{"selectedOptionIndexes":[2,0],"answeredInDuration":3}', rtype="string"),
        Item(key=f"{quiz_id}:{user2_id}:answer:5", value='{"selectedOptionIndexes":[],"answeredInDuration":11}', rtype="string"),
    ]


def publish_event(host: str, port: str, username: str, password: str, quiz_id: str):
    # TODO: Use cloudevents format once SDK support has been added for both producer and consumers. At the moment
    # loosely modelled after it.
    event = {
        "type": "com.ryangwaite.mc-speedrun.quiz.complete.v1",  
        "source": "/mc-speedrun/quiz-complete",
        "id": str(uuid.uuid4()),
        "time": str(datetime.datetime.now(datetime.timezone.utc).isoformat()),              # RFC-3339 formatted time
        "data": {
            "quizId": quiz_id,
        }
    }

    event_serialized = json.dumps(event)

    connection = pika.BlockingConnection(pika.ConnectionParameters(
        host=host,
        port=port,
        credentials=pika.PlainCredentials(
            username=username,
            password=password,
        )
    ))

    channel = connection.channel()
    channel.queue_declare(queue="quiz-complete")

    channel.basic_publish(
        exchange="",  # Use the default one
        routing_key="quiz-complete",
        body=event_serialized,
        properties=pika.BasicProperties(
            delivery_mode=pika.spec.PERSISTENT_DELIVERY_MODE,
        )
    )
    connection.close()


def main(args):

    if len(args) == 0 or not args[0]:
        sys.exit(f"Invalid args '{args}'")

    quiz_id = args[0]

    client = redis.Redis(host="localhost", port="6379", decode_responses=True)

    redis_contents = build_contents(quiz_id)

    # print("Clearing out existing redis contents...")
    # client.delete(*[i.key for i in redis_contents])

    print("Done. Populating redis...")

    with client.pipeline() as pipe:
        pbar = tqdm(redis_contents)
        for item in pbar:
            key, value, rtype = item.key, item.value, item.rtype
            pbar.set_description(f"Adding key='{key}' value='{value}'")

            if rtype == "string":
                pipe.set(key, value)      # Read back out with 'GET key'
            elif rtype == "list":
                pipe.lpush(key, *value)   # Read back out with 'LRANGE key 0 -1'
            elif rtype == "zset":
                pipe.zadd(key, value)     # Read back out with 'LRANGE key 0 -1'
            else:
                raise TypeError(f"Unexpected type '{type(value)}'")
        pipe.execute()
    

    client.close()

    print("Done. Copying quiz file to location...")
    os.makedirs("/tmp/question-sets", exist_ok=True)
    shutil.copy("../sample-quizzes/example-2.json", f"/tmp/question-sets/{quiz_id}.json")

    print("Done. Publishing message to rabbitmq...")

    publish_event("localhost", 5672, "admin", "passwd", quiz_id)

    print("Done")


if __name__ == "__main__":
    main(sys.argv[1:])